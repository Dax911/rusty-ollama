name: Build and Publish

on:
  workflow_dispatch: # manual (actions -> workflow-name -> run)

  push:
    branches:
      - main # build and publish once merged to main
  pull_request:
    branches:
      - main # build when a PR is opened against main (but don't publish)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0 # to reduce bloat
  RUST_BACKTRACE: 1 # to get backtraces on panics

permissions:
  contents: write # for tagging / releasing
  packages: write
  issues: write
  pull-requests: write # for releasing with a PR

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create or update release
        id: create-or-update-release
        uses: actions/github-script@v6
        with:
          script: |
            const tagName = `v${process.env.PACKAGE_VERSION}`;
            let release;

            // Try to get the release by tag name
            try {
              release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tagName,
              });
            } catch (error) {
              if (error.status !== 404) {
                throw error; // Re-throw if it's not a 'not found' error
              }
            }

            // If release exists, update it; otherwise, create a new release
            if (release && release.data) {
              const updateResponse = await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                tag_name: tagName,
                name: `Rusty Llama ${tagName}`,
                body: 'Rusty Llama - A Spotlight like Ollama GUI.',
                draft: ${{ ! contains(github.ref, 'refs/heads/main') }},
                prerelease: false
              });
              return updateResponse.data.id;
            } else {
              const createResponse = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Rusty Llama ${tagName}`,
                body: 'Rusty Llama - A Spotlight like Ollama GUI.',
                draft: ${{ ! contains(github.ref, 'refs/heads/main') }},
                generate_release_notes: true,
                prerelease: false
              });
              return createResponse.data.id;
            }

  build:
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 25
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: macOS
          #   platform: arm64 # https://docs.github.com/en/actions/using-github-hosted-runners/about-larger-runners/about-larger-runners#about-macos-larger-runners
          #   arch: arm64
          - os: macOS
            platform: macos-latest # old macOS 12 on intel :(
            arch: x64
          # - os: Linux
          #   platform: ubuntu-latest
          #   arch: x64
          # - os: Linux
          #   platform: arm64
          #   arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: setup node
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: install dependencies (linux only)
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: install Rust
      uses: dtolnay/rust-toolchain@nightly
      if: matrix.os == 'macOS'
      with:
        targets: aarch64-apple-darwin, x86_64-apple-darwin
        toolchain: nightly


    - name: install Rust
      uses: dtolnay/rust-toolchain@nightly
      if: matrix.os != 'macOS'
      with:
        toolchain: nightly

    - name: Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: src-tauri

    - uses: pnpm/action-setup@v2
      name: Install pnpm
      with:
        version: 8
        run_install: true

    - name: Build with Tauri
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        releaseId: ${{ needs.create-release.outputs.release_id }}
        releaseDraft: ${{ ! contains(github.ref, 'refs/heads/main') }}
        prerelease: ${{ ! contains(github.ref, 'refs/heads/main') }}
        includeRelease: true
        updaterJsonKeepUniversal: true # universal arach builds

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - create-release
      - build

    steps:
      - name: publish release
        id: publish-release
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: ${{ ! contains(github.ref, 'refs/heads/main') }},
              prerelease: ${{ ! contains(github.ref, 'refs/heads/main') }}
            })