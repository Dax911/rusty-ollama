name: Build and Publish

on:
  workflow_dispatch: # manual (actions -> workflow-name -> run)

  push:
    branches:
      - main # build and publish once merged to main
  pull_request:
    branches:
      - main # build when a PR is opened against main (but don't publish)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0 # to reduce bloat
  RUST_BACKTRACE: 1 # to get backtraces on panics

permissions:
  contents: write # for tagging / releasing
  packages: write
  issues: write
  pull-requests: write # for releasing with a PR

jobs:
  build:
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: macOS
          #   platform: arm64 # https://docs.github.com/en/actions/using-github-hosted-runners/about-larger-runners/about-larger-runners#about-macos-larger-runners
          #   arch: arm64
          - os: macOS
            platform: macos-latest # old macOS 12 on intel :(
            arch: x64
          # - os: Linux
          #   platform: ubuntu-latest
          #   arch: x64
          # - os: Linux
          #   platform: arm64
          #   arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: setup node
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: install dependencies (linux only)
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: install Rust stable
      uses: dtolnay/rust-toolchain@stable
      if: matrix.os == 'macOS'
      with:
        targets: x86_64-apple-darwin aarch64-apple-darwin

    - name: install Rust stable
      uses: dtolnay/rust-toolchain@stable
      if: matrix.os != 'macOS'

    - name: Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: src-tauri

    - uses: pnpm/action-setup@v2
      name: Install pnpm
      with:
        version: 8
        run_install: true

    - name: Build with pnpm
      run: pnpm build

    - name: Build with Tauri
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tagName: RustyLlama-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
        releaseName: 'RustyLlama v__VERSION__'
        releaseBody: 'See the assets to download this version and install.'
        releaseDraft: ! contains(github.ref, 'refs/heads/main') # only create a draft release if not on main
        prerelease: false
        includeRelease: true

    - name: Upload Binary
      uses: actions/upload-artifact@v3
      with:
        name: cargo-tauri
        path: ./src-tauri/target/release/bundle/dmg/macos/*.dmg
        if-no-files-found: error

    # tag and release
    - uses: rymndhng/release-on-push-action@master
      id: release
      with:
        bump_version_scheme: minor
        use_github_release_notes: true
        tag_prefix: "v"
        dry_run: ! contains(github.ref, 'refs/heads/main') # only create a draft release if not on main

    - name: Output Release Info
      run: |
        echo "🏷️ Tag ${{ steps.release.outputs.tag_name }}" >> "$GITHUB_STEP_SUMMARY"
        echo "🔢 Release version ${{ steps.release.outputs.version }}" >> "$GITHUB_STEP_SUMMARY"
        echo "🌮 Uploaded release artifacts to ${{ steps.release.outputs.upload_url }}" >> "$GITHUB_STEP_SUMMARY"