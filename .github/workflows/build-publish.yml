name: Build and Publish

on:
  workflow_dispatch: # manual (actions -> workflow-name -> run)

  push:
    branches: [ "main" ] # build and publish once merged to main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0 # to reduce bloat
  RUST_BACKTRACE: 1 # to get backtraces on panics

permissions:
  contents: write # for tagging / releasing

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: get version
        run: 0.0.1
          #TODO: something like echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build:
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 15
    # needs: [fmt, lint]
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4

    - name: setup node
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: install dependencies (linux only)
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: tooling/bundler

    - uses: pnpm/action-setup@v2
      name: Install pnpm
      with:
        version: 8
        run_install: true

    # Not sure if we'll need this yet
    # - name: Install cross for cross-compilation
    #   run: cargo install cross --git https://github.com/cross-rs/cross

    # - name: Upload cross
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: cross
    #     path: '~/.cargo/bin/cross'
    #     if-no-files-found: error

    - name: Build with Cargo
      run: cargo build --verbose

    - name: Build with Tauri
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
        releaseName: 'App v__VERSION__'
        releaseBody: 'See the assets to download this version and install.'
        releaseDraft: true
        prerelease: false

    # TBC on what we need to do here
    # - name: Upload Binary
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: cargo-tauri
    #     path: ./target/cargo-tauri
    #     if-no-files-found: error


  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
