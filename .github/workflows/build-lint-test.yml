name: Build, Lint and Test

on:
  workflow_dispatch: # manual (actions -> workflow-name -> run)

  # we can enable these soon when we have osmething to CI
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0 # to reduce bloat
  RUST_BACKTRACE: 1 # to get backtraces on panics

jobs:
  fmt:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain and rustfmt
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: tooling/bundler

      - name: Run cargo fmt
        run: cargo fmt --manifest-path ./Cargo.toml --all -- --check

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain and clippy
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: tooling/bundler

      - name: Lint with clippy
        run: cargo clippy --manifest-path ./Cargo.toml --all-targets -- -D warnings

  build:
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 15
    # needs: [fmt, lint]
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: tooling/bundler

    - name: Install cross for cross-compilation
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Upload cross
      uses: actions/upload-artifact@v3
      with:
        name: cross
        path: '~/.cargo/bin/cross'
        if-no-files-found: error

    - name: Build with Cargo
      run: cargo build --verbose

    # TBC on what we need to do here
    # - name: Upload Binary
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: cargo-tauri
    #     path: ./target/cargo-tauri
    #     if-no-files-found: error

    # TBC when we have something to test
  # test:
  #   runs-on: ${{ matrix.platform }}
  #   timeout-minutes: 15
  #   needs: [fmt, lint, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform: [ubuntu-latest, macos-latest]
  #       features:
  #         - { args: "" }
  #         - { args: "--features cli" }
  #         - { args: "--features cli --features updater" }
  #         - { args: "--features updater" }
  #   steps:
  #   - uses: actions/checkout@v4

  #     # download the artifact from the build job
  #   - name: Download cross
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: cross
  #       path: ~/.cargo/bin

  #   - name: test (using cross)
  #     if: ${{ matrix.platform.cross }}
  #     run: |
  #       cargo install cross --git https://github.com/cross-rs/cross
  #       cross ${{ matrix.platform.command }} --target ${{ matrix.platform.target }} ${{ matrix.features.args }}

  #   - name: test (using cargo)
  #     if: ${{ !matrix.platform.cross }}
  #     run: cargo ${{ matrix.platform.command }} --target ${{ matrix.platform.target }} ${{ matrix.features.args }}