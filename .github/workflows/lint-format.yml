name: Lint and Format

on:
  workflow_dispatch: # manual (actions -> workflow-name -> run)

  # we can enable these soon when we have osmething to CI
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0 # to reduce bloat
  RUST_BACKTRACE: 1 # to get backtraces on panics

jobs:
  fmt:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain and rustfmt
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: tooling/bundler

      - name: Run cargo fmt
        run: cargo fmt --manifest-path ./Cargo.toml --all -- --check

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: install dependencies (linux only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: true

      - name: Setup Rust toolchain and clippy
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: tooling/bundler

      - name: Lint with clippy
        run: cargo clippy --manifest-path ./Cargo.toml --all-targets -- -D warnings
